// Generated by gencpp from file lab03_example_msg/test_msg.msg
// DO NOT EDIT!


#ifndef LAB03_EXAMPLE_MSG_MESSAGE_TEST_MSG_H
#define LAB03_EXAMPLE_MSG_MESSAGE_TEST_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>

namespace lab03_example_msg
{
template <class ContainerAllocator>
struct test_msg_
{
  typedef test_msg_<ContainerAllocator> Type;

  test_msg_()
    : rotx()
    , roty()
    , rotz()  {
    }
  test_msg_(const ContainerAllocator& _alloc)
    : rotx(_alloc)
    , roty(_alloc)
    , rotz(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float64_<ContainerAllocator>  _rotx_type;
  _rotx_type rotx;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _roty_type;
  _roty_type roty;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _rotz_type;
  _rotz_type rotz;





  typedef boost::shared_ptr< ::lab03_example_msg::test_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lab03_example_msg::test_msg_<ContainerAllocator> const> ConstPtr;

}; // struct test_msg_

typedef ::lab03_example_msg::test_msg_<std::allocator<void> > test_msg;

typedef boost::shared_ptr< ::lab03_example_msg::test_msg > test_msgPtr;
typedef boost::shared_ptr< ::lab03_example_msg::test_msg const> test_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lab03_example_msg::test_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lab03_example_msg::test_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lab03_example_msg::test_msg_<ContainerAllocator1> & lhs, const ::lab03_example_msg::test_msg_<ContainerAllocator2> & rhs)
{
  return lhs.rotx == rhs.rotx &&
    lhs.roty == rhs.roty &&
    lhs.rotz == rhs.rotz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lab03_example_msg::test_msg_<ContainerAllocator1> & lhs, const ::lab03_example_msg::test_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lab03_example_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lab03_example_msg::test_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lab03_example_msg::test_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lab03_example_msg::test_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lab03_example_msg::test_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lab03_example_msg::test_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lab03_example_msg::test_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lab03_example_msg::test_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1a848a7384d8bb575b0a921bed0b0de3";
  }

  static const char* value(const ::lab03_example_msg::test_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1a848a7384d8bb57ULL;
  static const uint64_t static_value2 = 0x5b0a921bed0b0de3ULL;
};

template<class ContainerAllocator>
struct DataType< ::lab03_example_msg::test_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lab03_example_msg/test_msg";
  }

  static const char* value(const ::lab03_example_msg::test_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lab03_example_msg::test_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float64 rotx\n"
"std_msgs/Float64 roty\n"
"std_msgs/Float64 rotz\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
;
  }

  static const char* value(const ::lab03_example_msg::test_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lab03_example_msg::test_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rotx);
      stream.next(m.roty);
      stream.next(m.rotz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct test_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lab03_example_msg::test_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lab03_example_msg::test_msg_<ContainerAllocator>& v)
  {
    s << indent << "rotx: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.rotx);
    s << indent << "roty: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.roty);
    s << indent << "rotz: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.rotz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LAB03_EXAMPLE_MSG_MESSAGE_TEST_MSG_H
