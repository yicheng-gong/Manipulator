// Generated by gencpp from file lab03_task/rotmat2quatResponse.msg
// DO NOT EDIT!


#ifndef LAB03_TASK_MESSAGE_ROTMAT2QUATRESPONSE_H
#define LAB03_TASK_MESSAGE_ROTMAT2QUATRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Quaternion.h>

namespace lab03_task
{
template <class ContainerAllocator>
struct rotmat2quatResponse_
{
  typedef rotmat2quatResponse_<ContainerAllocator> Type;

  rotmat2quatResponse_()
    : q()  {
    }
  rotmat2quatResponse_(const ContainerAllocator& _alloc)
    : q(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _q_type;
  _q_type q;





  typedef boost::shared_ptr< ::lab03_task::rotmat2quatResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lab03_task::rotmat2quatResponse_<ContainerAllocator> const> ConstPtr;

}; // struct rotmat2quatResponse_

typedef ::lab03_task::rotmat2quatResponse_<std::allocator<void> > rotmat2quatResponse;

typedef boost::shared_ptr< ::lab03_task::rotmat2quatResponse > rotmat2quatResponsePtr;
typedef boost::shared_ptr< ::lab03_task::rotmat2quatResponse const> rotmat2quatResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lab03_task::rotmat2quatResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lab03_task::rotmat2quatResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lab03_task::rotmat2quatResponse_<ContainerAllocator1> & lhs, const ::lab03_task::rotmat2quatResponse_<ContainerAllocator2> & rhs)
{
  return lhs.q == rhs.q;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lab03_task::rotmat2quatResponse_<ContainerAllocator1> & lhs, const ::lab03_task::rotmat2quatResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lab03_task

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lab03_task::rotmat2quatResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lab03_task::rotmat2quatResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lab03_task::rotmat2quatResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lab03_task::rotmat2quatResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lab03_task::rotmat2quatResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lab03_task::rotmat2quatResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lab03_task::rotmat2quatResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bb310d1d9861005dc8b6d49680a2d86e";
  }

  static const char* value(const ::lab03_task::rotmat2quatResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbb310d1d9861005dULL;
  static const uint64_t static_value2 = 0xc8b6d49680a2d86eULL;
};

template<class ContainerAllocator>
struct DataType< ::lab03_task::rotmat2quatResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lab03_task/rotmat2quatResponse";
  }

  static const char* value(const ::lab03_task::rotmat2quatResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lab03_task::rotmat2quatResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Quaternion q\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::lab03_task::rotmat2quatResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lab03_task::rotmat2quatResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.q);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rotmat2quatResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lab03_task::rotmat2quatResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lab03_task::rotmat2quatResponse_<ContainerAllocator>& v)
  {
    s << indent << "q: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.q);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LAB03_TASK_MESSAGE_ROTMAT2QUATRESPONSE_H
